#!/usr/bin/env bash

# Bash Clash!
#
# A powerful bash argument parser.
#
# _source_ this file in your bash script, passing in your arguments and they
# will be parsed into `__switches` and `__positionals`: bash arrays containing
# the values of the parsed arguments.
#
# Both arrays - and optionally, using the `--declare-switches` flag, all of the
# arguments parsed as `__switches` - will be available within the context of
# your calling shell process.

# Usage:
# - source "$bash_clash" "$@"
# - source "$bash_clash" --declare-switches "$@"

#
# Normalise the given variable name
__normalise_name() {
    echo "$1" | sed -E 's/^--|^-//' | sed 's/-/_/g'
}

#
# Parse given arguments into variables with in the context of the current shell
# process.
__parse_arguments() {
    local switches=()
    local positionals=()
    local switch
    local value

    while [[ $# > 0 ]]; do
        if [[ "$1" =~ ^- ]]; then
            # we're now in switch territory...

            if [[ "$1" =~ ^--$ ]]; then
                # $1 is an argument separator, --, so we can just skip ahead
                shift 1
            else
                if [[ "$1" =~ ^--?(.*)=(.*)$ ]]; then
                    # this switch is 'joined' - e.g.: --switch=value
                    switch="${BASH_REMATCH[1]}" && value="${BASH_REMATCH[2]}"
                    shift 1
                else
                    if [[ "$2" =~ ^([^-]|[^--]) ]]; then
                        # $2 is a value, rather than a switch identifier, so it
                        # looks like a separated switch - e.g.: --switch value
                        switch="$1" && value="$2"
                        shift 2
                    else
                        # $1 just looks like a flag, which means it is 'truthy',
                        # so it has a value of true; and a flag with a value is
                        # basically a switch
                        switch="$1" && value=true
                        shift 1
                    fi
                fi

                switches+=("$(__normalise_name "$switch")="$value"")
            fi
        else
            positionals+=("$1")
            shift 1
        fi
    done

    __switches=("${switches[*]}")
    __positionals=("${positionals[*]}")
}

__switches=()
__positionals=()

if [[ "$1" == "--declare-switches" ]]; then
    shift && __parse_arguments $@ && declare ${__switches[*]}

    return 0
fi

__parse_arguments $@
