#!/usr/bin/env bash

__origin="${BASH_SOURCE[1]/$__project_dir/.}"

##
# Overrides the builtin source function to enable dependency loading
##
source () {
    __service_source="$1"
    __service_args=${@:2}

    if [[ -f "$__service_source" ]]; then
        # we're dealing with a plain ole' file to be sourced, maybe with some args..
        builtin source "$__service_source" $__service_args
        exit 0
    fi

    __service_alias="$__service_source"
    __service_definition=($(container::get_definition "$__service_alias"))

    if [[ $? -eq 1 ]]; then
        echo "The service '$__service_alias' could not be loaded."
        exit 1
    fi

    __service_source=${__service_definition[0]}
    __service_dependencies=()

    builtin source $(container::resolve "@file-logger")
    log_slog::debug "Loading '$__service_alias' for '$__origin'" "source:$__service_source"

    for __service_dependency in ${__service_definition[*]:1}; do
        __dependency_definition=(
            $(container::get_definition "$__service_dependency" "$__service_dependency")
        )

        if [[ -f ${__dependency_definition[0]} ]]; then
            # the dependency is a file that can be loaded
            # TODO:
            # - can we do this to recursively load dependencies?
            # - source $__service_dependency
            __service_dependencies+=($__service_dependency)
            log_slog::debug "Loadable dependency '$__service_dependency'" "source:${__dependency_definition[0]}"
        else
            __service_dependencies+=(${__dependency_definition[*]})
            log_slog::debug "Non-loadable dependency '$__service_dependency'" "resolved:'${__dependency_definition[*]}'"
        fi
    done

    builtin source $__service_source ${__service_dependencies[*]} $__service_args

    unset \
        __origin \
        __service_alias \
        __service_args \
        __service_definition \
        __service_source \
        __service_dependencies \
        __service_dependency \
        __dependency_definition
}
