#!/usr/bin/env bash

__services_base="$1" && shift
__services_config="$@"

##
# Defines available config.
##
__services::define_config() {
    local key
    local value

    for item in ${__services_config[*]}; do
        [[ "$item" =~ ^(.*)=(.*)$ ]]
        key="$(echo ${BASH_REMATCH[1]} | sed "s/_/-/g")"
        value="${BASH_REMATCH[2]}"

        container::add "$key" "$value"
    done
}

##
# Defines available parameters.
##
__services::define_parameters() {
    container::add "config-dir" "$__services_base/config"
    container::add "lib-dir" "$__services_base/lib"
    container::add "src-dir" "$__services_base/src"

    # add all src dirs as container parameters
    for dir in $(find $__services_base/src -mindepth 1 -maxdepth 1 -type d); do
        container::add "$(basename $dir)-dir" "$dir"
    done

    local excluding_pipe=$(container::resolve "excluding-pipe")
    container::add "message-routing" \
        "--" \
            "$__services_base/src/message/kill-message::$excluding_pipe" \
            "$__services_base/src/message/report-message::$excluding_pipe"
}

##
# Defines available services.
##
__services::define_services() {
    # lib
    container::add "stdout-logger" \
        "$__services_base/lib/log-slog/index" \
            "@log-level" \
            "$(tty)"
    container::add "bash-clash" \
        "$__services_base/lib/bash-clash/index"

    # commands
    container::add "time-warp-command" \
        "$__services_base/src/command/time-warp/index"
    container::add "queue-command" \
        "$__services_base/src/command/queue/index"
    container::add "watch-command" \
        "$__services_base/src/command/watch/index"

    # consumers
    container::add "excluding-consumer" \
        "$__services_base/src/service/queue/consumer"

    # buses
    container::add "message-bus" \
        "$__services_base/src/bus/message-bus"

    # messages
    container::add "kill-message" \
        "$__services_base/src/message/kill-message"
    container::add "report-action" \
        "$__services_base/src/message/report-message"

    # handlers
    container::add "message-handler" \
        "$__services_base/src/handler/message-handler"

    # actions
    container::add "kill-action" \
        "$__services_base/src/action/kill-action"
    container::add "report-action" \
        "$__services_base/src/action/report-action"

    # TODO: these definitions should allow a service to be use more interface
    # -like functionality, so I can call @logger, but get the logger configured
    # for this service - e.g.:
    # - @logger->@std-logger
    # meaning a call to @logger, which is abstract, will return a concrete
    # implementation of a @std-logger
}

##
# Defines all configured services.
##
services::define() {
    __services::define_config
    __services::define_parameters
    __services::define_services

    unset __services_base
    unset __services_config
}
