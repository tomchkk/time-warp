#!/usr/bin/env bash

__producer_logger=${1:?"A logger is required"}
__producer_bash_clash=${2:?"bash-clash is required"}
__producer_bus=${3:?"A message bus is required"}
__producer_topic=${4:?"A publishable topic is required"}
__producer_profile_matcher=${5:?"A profile matcher is required"}
__producer_watching=${@:6}

source $__producer_logger

if [[ -z "$__producer_watching" ]]; then
    log::error "No events to watch are defined" && exit 1
fi

##
# Produces publishable topic messages into the given message bus.
#
producer::produce() {
    local path_profiles=${1:?"A path profile is required"}

    local events=('create' 'remove' 'rename' 'write' 'meta')
    local changes=(
        'WATCHEXEC_CREATED_PATH'
        'WATCHEXEC_REMOVED_PATH'
        'WATCHEXEC_RENAMED_PATH'
        'WATCHEXEC_WRITTEN_PATH'
        'WATCHEXEC_META_CHANGED_PATH'
    )

    for key in ${!changes[@]}; do
        if [[ -z ${!changes[$key]} ]]; then
            # no detectable change occurred: no changec path was given
            continue
        fi

        local event="${events[$key]}"
        if ! $(__producer::event_is_watched $event); then
            log::debug "Ignoring '$event' event: not watched"

            continue
        fi

        log::debug "Watched event '$event' was fired"

        # now that shit is getting real, let's charge our weapons!
        source "$__producer_profile_matcher" "$path_profiles"
        source "$__producer_bus"
        source "$__producer_bash_clash" "$(
            __producer::parameterize_paths "${!changes[$key]}"
        )"

        local path; for path in "${bash_clash_positionals[@]}"; do
            # $path will be a path stub if $WATCHEXEC_COMMON_PATH is set,
            # otherwise it will be a full path. So, either way, the two can
            # be concatenated to get a full path to a changed file
            path="${WATCHEXEC_COMMON_PATH}${path}"

            log::debug "Detected modification to '$path'."

            if $(matcher::match $path); then
                log::info "Matcher matched path '$path'"

                local message=(
                    "PUBLISH"
                    --producer-pid "$$"
                    --topic "$__producer_topic"
                    --event "$event"
                    --path "$path"
                )

                # this statement must be synchronous, calling it asynchronously
                # causes messages to be missed
                message_bus::dispatch_message ${message[@]}
            else
                log::info "Matcher did not match path '$path'"
            fi
        done
    done
}

##
# Determines if the given event is configured to be watched.
#
__producer::event_is_watched() {
    if $(printf '%s\n' ${__producer_watching[@]} | grep -q -E ^$1$); then
        return 0
    fi

    return 1
}

##
# Modifies the given paths string to a format interpretable by bash-clash -
# i.e.:
# - path/2/file:path/2/other-file -> path/2/file -- path/2/other-file
##
__producer::parameterize_paths() {
    echo "$@" | sed -E 's/:/ -- /g'
}
