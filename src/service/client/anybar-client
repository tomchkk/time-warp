#!/usr/bin/env bash

__anybar_client_port=${1:?"A port for AnyBar is required"}
__anybar_client_netcat="${2:?"Netcat is required"}"
source "${3:?"A logger is required"}"

##
# Sends an indication signal to AnyBar, starting the application if it's not
# already running.
##
indicator_client::indicate() {
    local signal="$1"

    if ! $(__anybar_client::signal_is_valid $signal); then
        log::error "The AnyBar signal '$signal' is not valid"

        return 1
    fi

    if ! __anybar_client::open; then
        return 1
    fi

    local nc_args=(
        -4u -w0 localhost "$__anybar_client_port"
    )

    echo -n "$signal" | "$__anybar_client_netcat" "${nc_args[@]}"
}

##
# Determines if the given signal indicator is a valid one.
##
__anybar_client::signal_is_valid() {
    local signal="${1:?"A signal value is required to validate"}"

    case "$signal" in
        white|red|orange|yellow|green|cyan|blue|purple|black)
            return 0 ;;
        question|exclamation)
            return 0 ;;
        quit) # special command to quit AnyBar
            return 0 ;;
        *)
            return 1 ;;
    esac

}

##
# Opens the AnyBar application if it is installed and not already listening on
# the configured port.
##
__anybar_client::open() {
    if __anybar_client::is_listening; then
        return 0
    fi

    if ! $(ANYBAR_PORT=$__anybar_client_port open -na AnyBar 2>/dev/null); then
        log::debug "AnyBar is not installed!"

        return 1
    fi

    # here we'll wait until the client is definitely up and running to ensure
    # that a new instance will receive the signal it was sent

    return $(__anybar_client::wait_until_open)
}

##
# Determines if AnyBar is currently listening on the configured port.
##
__anybar_client::is_listening() {
    if ! $(lsof -i UDP:$__anybar_client_port | grep -q AnyBar); then
        return 1
    fi

    return 0
}

##
# Repeatedly checks for an listening instance of AnyBar before returning.
##
__anybar_client::wait_until_open() {
    local backoff=0
    local limit=5

    while ! $(__anybar_client::is_listening); do
        if ((backoff >= limit)); then
            log::error "AnyBar took too long to open!"

            return 1
        fi

        log::debug "Waiting for AnyBar to start"

        sleep $backoff
        backoff=$((++backoff))
    done

    return 0
}
