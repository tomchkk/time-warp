#!/usr/bin/env bash

source ${1:?"A logger is required"}

__profile_manager_profiles=${2:?"A profile file or directory is required"}

if [[ ! -e "$__profile_manager_profiles" ]]; then
    log::error "The profile file or directory '$__profile_manager_profiles' does not exist"

    exit 1
fi

##
# Gets a profile file path, or an array of file path inodes, both of which can
# then be passed to profile_manager getter methods to handle the actual profile
# files as required.
##
profile_manager::get_profiles() {
    local path="$__profile_manager_profiles"
    local profiles=()

    if [[ -f "$path" ]]; then
        profiles="$path"
    elif [[ -d "$path" ]]; then
        while read file; do
            profiles+=($file)
        done < <(ls -i -d $path/* | awk '{print $1}') # reads inodes of $path
    fi

    echo ${profiles[@]}
}

##
# Determines if a given profile is considered a 'base' profile - i.e. a profile
# which carries defaults useable for other profiles.
##
profile_manager::is_base_profile() {
    local profile="$(__profile_manager::convert_profile_inode_to_path $1)"

    if [[ "$profile" == *"/_base.profile" ]]; then
        return 0
    fi

    return 1
}

##
# Gets defined flags from the given profile file.
##
profile_manager::get_flags() {
    local profile="$(__profile_manager::convert_profile_inode_to_path $1)"

    echo $(unset flags && source "$profile" && echo ${flags[@]})
}

##
# Gets defined options from the given profile file.
##
profile_manager::get_options() {
    local profile="$(__profile_manager::convert_profile_inode_to_path $1)"

    echo $(unset options && source "$profile" && echo ${options[@]})
}

##
# Gets predicates from the given profile file.
##
profile_manager::get_predicates() {
    local profile="$(__profile_manager::convert_profile_inode_to_path $1)"

    echo $(unset predicates && source "$profile" && echo ${predicates[@]})
}

##
# Converts an inode to a file path, if profile is not a file and
# __profile_manager_profiles is a directory
##
__profile_manager::convert_profile_inode_to_path() {
    local profile="$1"

    if [[ ! -f "$profile" ]] && [[ -d "$__profile_manager_profiles" ]]; then
        # convert an inode to a file path
        profile=$(find "$__profile_manager_profiles" -xdev -inum $profile)
    fi

    echo "$profile"
}
