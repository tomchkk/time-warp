#!/usr/bin/env bash

source ${1:?"An option tester is required"}
source ${2:?"A predicate tester is required"}
source ${3:?"A logger is required"}

__watch_strategy_path=""

##
# Sets the path the strategy will use to determine matches.
##
strategy::set_path() {
    __watch_strategy_path="$@"
}

##
# Determines if all relevant profile options match the set path.
##
strategy::path_matches_options() {
    local options="$@"
    local path="${__watch_strategy_path:?"A path must be set"}"
    local matches=false

    local option; for option in $options; do
        case "$option" in
            -f*|--filter*)
                local filter="$option"

                if ! $(option_tester::test_filter "$filter" "$path"); then
                    __watch_strategy::log_failed "$filter"

                    return 1
                fi

                matches=true
                __watch_strategy::log_passed "$filter"
            ;;
            *)
                __watch_strategy::log_skipped "$option" "not relevant"

                continue
            ;;
        esac
    done

    $matches && return 0 || return 1
}

##
# Determines if all relevant profile predicates match the set path.
##
strategy::path_matches_predicates() {
    local predicates="$@"
    local path="${__watch_strategy_path:?"A path must be set"}"
    local matches=false

    local predicate; for predicate in $predicates; do
        case "$predicate" in
            -d*|--directory*)
                if ! $(predicate_tester::test_directory "$predicate" "$path"); then
                    __watch_strategy::log_failed "$predicate"

                    return 1
                fi

                matches=true
                __watch_strategy::log_passed "$predicate"
            ;;
            -f*|--file*)
                if ! $(predicate_tester::test_file "$predicate" "$path"); then
                    __watch_strategy::log_failed "$predicate"

                    return 1
                fi

                matches=true
                __watch_strategy::log_passed "$predicate"
            ;;
            *)
                __watch_strategy::log_skipped "$predicate" "not implemented"

                continue
            ;;
        esac
    done

    $matches && return 0 || return 1
}

__watch_strategy::log_passed() {
    local type="$1"
    local reason="$([[ -n "$2" ]] && echo " ($2)")"

    log::debug "Passed: '$type'$reason"
}

__watch_strategy::log_failed() {
    local type="$1"
    local reason="$([[ -n "$2" ]] && echo " ($2)")"

    log::debug "Failed: '$type'$reason"
}

__watch_strategy::log_skipped() {
    local type="$1"
    local reason="$([[ -n "$2" ]] && echo " ($2)")"

    log::debug "Skipped: '$type'$reason"
}
