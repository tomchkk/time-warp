#!/usr/bin/env bash

__watch_feature_profile_manager=${1:?"A profile manager is required"}
__watch_feature_consumer=${2:?"A consumer is required"}
__watch_feature_bus=${3:?"A message bus is required"}
__watch_feature_logger=${4:?"A logger is required"}
__watch_feature_debug=${5:-false}

source $__watch_feature_logger

##
# Parses filters from a profile file
##
# __watch_feature::parse_filters() {
#     local profile="$1"

#     echo $(source "$profile" && echo ${filters[*]})
# }

##
# Parses watch filters from a given profile file or directory
##
__watch_feature::parse_filter_options() {
    local profiles="$1"

    source $__watch_feature_profile_manager "$profiles"

    local filters=()

    for profile in $(profile_manager::get_profiles); do
        for item in $(profile_mananger::get_filters $profile); do
            filters+=("$item")
        done
    done

    echo ${filters[*]}

    # if [[ ! -e "$profiles" ]]; then
    #     log::error "The profile file or directory '$profiles' does not exist"

    #     return 1
    # fi

    # if [[ -f "$profiles" ]]; then
    #     filters=($(__watch_feature::parse_filters "$profiles"))
    # elif [[ -d "$profiles" ]]; then
    #     for profile in $(find "$profiles" -mindepth 1 -maxdepth 1 -type f); do
    #         filters+=($(__watch_feature::parse_filters "$profile"))
    #     done
    # fi

    # echo ${filters[*]}
}

##
# Parses watch options from a given array of paths
#
__watch_feature::parse_watch_options() {
    local paths=${@:?"At least one path is required"}
    local watches=()

    for path in ${paths[*]}; do
        if [[ ! -d "$path" ]]; then
            log::error "The directory '$path' does not exist"

            return 1
        fi

        watches+=("--watch $path ")
    done

    echo ${watches[*]}
}

##
# Feature exit strategy
##
__watch_feature::on_exit() {
    source $__watch_feature_bus
    message_bus::dispatch_message "KILL"
}

##
# Initiates a watch of a given path or paths for modications.
##
feature::watch() {
    local profiles="${1:?"A profile file or directory is required"}"
    local root_paths="${@:2}"

    local filters=$(__watch_feature::parse_filter_options "$profiles")
    local watches=$(__watch_feature::parse_watch_options "$root_paths")

    if [[ -z $filters ]] || [[ -z $watches ]]; then
        exit 1
    fi

    trap __watch_feature::on_exit EXIT

    source $__watch_feature_consumer && consumer::consume &

    log::debug "Launching watchexec with pid: $$"

    local options=(
        ${watches[*]}
        ${filters[*]}
        $($__watch_feature_debug && echo "--verbose")
        --no-vcs-ignore
        --no-default-ignore
        --postpone
        -- time-warp queue --produce $profiles
    )

    watchexec ${options[*]}
}
