#!/usr/bin/env bash

__watch_feature_options_resolver=${1:?"An options resolver is required"}
__watch_feature_consumer=${2:?"A consumer is required"}
__watch_feature_bus=${3:?"A message bus is required"}
__watch_feature_logger=${4:?"A logger is required"}
__watch_feature_fifo=${5:?"The fifo pipe path is required"}
__watch_feature_watchexec_debug=${6:-false}

source $__watch_feature_options_resolver
source $__watch_feature_logger

##
# Feature exit strategy
##
__watch_feature::on_exit() {
    source $__watch_feature_bus
    message_bus::dispatch_message "KILL"
}

##
# Initiates a watch of a given path or paths for modifications.
##
feature::watch() {
    local profile="${1:?"A profile file or directory is required"}"
    local dirs="${@:2}"

    if [[ -p "$__watch_feature_fifo" ]]; then
        echo "Unable to start watch: consumer is already running"

        return 1
    fi

    local flags=$(options_resolver::resolve_flags "$profile")
    local options=$(options_resolver::resolve_options "$profile")
    local watches=$(options_resolver::resolve_watches "$dirs")

    # TODO: figure out the inverse case - i.e.:
    # - when, say, a composer.json file is created where it has a /vendor
    # sibling, it also needs to be updated

    if [[ -z $watches ]]; then
        # we can't start a watch without specifying directories to watch
        return 1
    fi

    trap __watch_feature::on_exit SIGINT

    source $__watch_feature_consumer && consumer::consume &

    log::info "Launching $APP_NAME watch (consumer pid: $! | producer pid: $$)"

    local resolved=(
        # only execute the command after the first triggered watch
        --postpone
        $($__watch_feature_watchexec_debug && echo "--verbose")
        ${flags[@]}
        ${options[@]}
        ${watches[@]}
        # the producer call _must_ be an external call to the application to
        # enable all required config and services
        -- "$APP_NAME" queue --produce "$profile"
    )

    log::debug "Resolved watchexec options: " ${resolved[@]}

    watchexec ${resolved[@]}
}
