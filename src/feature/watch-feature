#!/usr/bin/env bash

__watch_feature_consumer=${1:?"A consumer is required"}
__watch_feature_bus=${2:?"A message bus is required"}
__watch_feature_logger=${3:?"A logger is required"}
__watch_feature_debug=${4:-false}

source $__watch_feature_bus
source $__watch_feature_logger

##
# Feature exit strategy
##
__watch_feature::on_exit() {
    message_bus::dispatch_message "KILL"
}

##
# Initiates a watch of a given path or paths for modications.
##
feature::watch() {
    local paths=${@:?"At least one path to watch must be specified"}

    local watches=()

    for path in ${paths[*]}; do
        if [[ ! -d "$path" ]]; then
            log::error "The directory '$path' does not exist"

            return 1
        fi

        watches+=("--watch $path ")
    done

    trap __watch_feature::on_exit EXIT

    # TODO:
    # - inject file profiles to determine filters and ignored lists
    # - how to handle lack of file profiles?
    # - resolves options and then calls watchexec

    # source $__queue_command_excluding_producer $args
    # - runs `watchexec --resolved-options -- /path/2/producer`
    #   - watches for changes to given paths gets filters from profiles
    #   - ignores changes caused by itself
    #   - passes normalised path to `time-warp match $path` to match the path
    #     to a configured profile
    #   - on successful match, pushes message (timestamp and path) to time-warp/excluding.q file

    source $__watch_feature_consumer &

    log::debug "Launching watchexec with pid: $$"

    local options=(
        $($__watch_feature_debug && echo "--verbose")
        ${watches[*]}
        --filter '**/vendor'
        --ignore '**/vendor/**/vendor/**'
        --no-vcs-ignore
        --no-default-ignore
        --postpone
        -- time-warp queue --produce
    )

    watchexec ${options[*]}
}
