#!/usr/bin/env bash

__watch_feature_options_resolver=${1:?"An options resolver is required"}
__watch_feature_consumer=${2:?"A consumer is required"}
__watch_feature_bus=${3:?"A message bus is required"}
__watch_feature_logger=${4:?"A logger is required"}
__watch_feature_fifo=${5:?"The fifo pipe path is required"}
__watch_feature_app=${6:?"The app binary is required"}
__watch_feature_watchexec=${7:?"The watchexec binary is required"}
__watch_feature_producer_pid_file="${8:?"The producer pid file path is required"}"
__watch_feature_status_indicator=${9:?"A status indicator is required"}
__watch_feature_watchexec_debug=${10:-false}

source $__watch_feature_options_resolver
source $__watch_feature_logger
source $__watch_feature_status_indicator

##
# Feature exit strategy
##
__watch_feature::on_exit() {
    status_indicator::warn

    source $__watch_feature_bus
    message_bus::dispatch_message "KILL"
    log::info "The watch process ($$) was terminated"

    __watch_feature::remove_producer_pid_file
    status_indicator::quit
}

##
# Initiates a watch of a given path or paths for modifications.
##
feature::watch() {
    local profile="${1:?"A profile file or directory is required"}"
    local dirs="${@:2}"

    if [[ -p "$__watch_feature_fifo" ]]; then
        echo "Unable to start watch: consumer is already running"

        return 1
    fi

    local flags=$(options_resolver::resolve_flags "$profile")
    local options=$(options_resolver::resolve_options "$profile")
    local watches=$(options_resolver::resolve_watches "$dirs")

    if [[ -z $watches ]]; then
        # we can't start a watch without specifying directories to watch
        return 1
    fi

    trap __watch_feature::on_exit SIGINT

    status_indicator::caution

    source $__watch_feature_consumer && consumer::consume &

    log::info "Launching $APP_NAME watch (consumer pid: $! | watch pid: $$)"

    __watch_feature::remove_producer_pid_file

    local resolved=(
        $($__watch_feature_watchexec_debug && echo "--verbose")
        ${flags[@]}
        ${options[@]}
        ${watches[@]}
        # the producer call _must_ be an external call to the application to
        # enable all required config and services
        -- "$__watch_feature_app" queue --produce "$profile"
    )

    log::debug "Resolved watchexec options: " ${resolved[@]}

    "$__watch_feature_watchexec" ${resolved[@]}
}

##
# Removes the producer pid file, if it exists.
##
__watch_feature::remove_producer_pid_file() {
    if [[ -f "$__watch_feature_producer_pid_file" ]]; then
        rm -f "$__watch_feature_producer_pid_file"
    fi
}
