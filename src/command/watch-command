#!/usr/bin/env bash

__watch_command_watch_feature="${1:?"The watch feature is required"}"
__watch_command_default_profile="${2:?"A default profile dir is required"}"
__watch_command_default_dir="${3:?"A default root dir is required"}"

source "$__watch_command_watch_feature"

##
# Cats the command's usage documentation.
##
__watch_command::usage() {
    cat << EOF

$APP_NAME ($APP_VERSION) - Watch

Watch for changes to files matching configured profiles and optionally exclude
matches from Time Machine backups

Usage:  $APP_NAME watch [options] <args>

Options:
    -h, --help      Print usage information
    -d, --dir       The root directory path from which to watch for changes. This
                    option may be specified multiple times to set up multiple watches
    -p, --profile   A file profile or a directory containing multiple profiles
                    used to identify target file items

EOF
}

# TODO: implement optional functionality, perhaps --force (i.e. dry-run by default)

##
# Handles incoming watch commands.
##
watch_command::handle() {
    local profile="$__watch_command_default_profile"
    local dirs=()

    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -d|--dir)
                if [[ -d "$2" ]]; then
                    dirs+=("$2") && shift
                else
                    echo "'$2' is not a valid directory to watch" >&2

                    exit 1
                fi
            ;;
            -p|--profile)
                if [[ -d "$2" ]]; then
                    profile="$(cd "$2"; pwd)" && shift
                elif [[ -f "$2" ]]; then
                    profile="$(cd $(dirname "$2"); pwd)/$(basename "$2")" && shift
                else
                    echo "'$2' is not a valid profile" >&2

                    exit 1
                fi
            ;;
            -h|--help|-*)
                __watch_command::usage && exit 0
            ;;
        esac

        shift
    done

    if [[ -z $dirs ]]; then
        dirs=("$__watch_command_default_dir")
    fi

    feature::watch "$profile" ${dirs[@]}
}
